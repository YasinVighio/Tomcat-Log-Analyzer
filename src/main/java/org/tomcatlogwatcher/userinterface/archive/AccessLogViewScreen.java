/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.tomcatlogwatcher.userinterface.archive;

import org.tomcatlogwatcher.core.ApacheLoggingConstants;
import org.tomcatlogwatcher.core.Constants;
import org.tomcatlogwatcher.core.LogWatcher;
import org.tomcatlogwatcher.core.PropManager;
import org.tomcatlogwatcher.dto.AccessLogDTO;
import org.tomcatlogwatcher.dto.ActionDTO;
import org.tomcatlogwatcher.userinterface.LogEntryTableModel;
import org.tomcatlogwatcher.userinterface.handlers.TruncatedCopyHandler;
import org.tomcatlogwatcher.userinterface.renderers.AccessLogTableCellRenderer;
import org.tomcatlogwatcher.userinterface.renderers.AccessLogTableNormalCellRenderer;
import org.tomcatlogwatcher.userinterface.adapters.AccessLogTableMouseAdapter;
import org.tomcatlogwatcher.userinterface.renderers.AccessLogTableWrappedCellRenderer;
import org.tomcatlogwatcher.userinterface.renderers.TextTruncateCellRenderer;
import org.tomcatlogwatcher.utility.AppLogger;
import org.tomcatlogwatcher.utility.UIUtils;
import org.tomcatlogwatcher.utility.Utils;

import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.util.*;
import java.util.List;
import java.util.regex.Pattern;

/**
 *
 * @author Yasin
 */
public class AccessLogViewScreen extends javax.swing.JFrame {

    private static RowFilter<TableModel, Object> tableFilter = null;
    private static TableRowSorter<TableModel> tableSorter = null;
    private Date accessLogDate = null;
    private Map<Integer, TableCellRenderer> columnRendererMap = new HashMap<>();
    private Map<Integer, List<String>> columnTruncatedTexts = new HashMap<>();

    /**
     * Creates new form AccessLogViewScreen
     */
    public AccessLogViewScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        fileNameField = new javax.swing.JTextField();
        patternField = new javax.swing.JTextField();
        searchField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pickFileBtn = new javax.swing.JButton();
        processFileBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        accessLogTbl = new javax.swing.JTable();
        columnSelector = new javax.swing.JComboBox<>();
        clearFilterBtn = new javax.swing.JButton();
        criteriaSelector = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        disjunctionSelector = new javax.swing.JComboBox<>();
        searchButton = new javax.swing.JButton();
        reqMethodLbl = new javax.swing.JLabel();
        reqMethodSelector = new javax.swing.JComboBox<>();
        removeTextField = new javax.swing.JTextField();
        removeTextBtn = new javax.swing.JButton();
        removeTextResetBtn = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileNameField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        fileNameField.setEnabled(false);
        fileNameField.setMaximumSize(new java.awt.Dimension(480, 25));
        fileNameField.setMinimumSize(new java.awt.Dimension(480, 25));
        fileNameField.setName(""); // NOI18N
        fileNameField.setPreferredSize(new java.awt.Dimension(480, 25));

        patternField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        patternField.setMaximumSize(new java.awt.Dimension(480, 25));
        patternField.setMinimumSize(new java.awt.Dimension(480, 25));
        patternField.setPreferredSize(new java.awt.Dimension(480, 25));

        searchField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        searchField.setMaximumSize(new java.awt.Dimension(480, 25));
        searchField.setMinimumSize(new java.awt.Dimension(480, 25));
        searchField.setPreferredSize(new java.awt.Dimension(480, 25));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setText("Value");

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Pattern");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("File");

        pickFileBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        pickFileBtn.setText("PICK FILE");
        pickFileBtn.setMaximumSize(new java.awt.Dimension(145, 25));
        pickFileBtn.setMinimumSize(new java.awt.Dimension(145, 25));
        pickFileBtn.setPreferredSize(new java.awt.Dimension(145, 25));
        pickFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickFileBtnActionPerformed(evt);
            }
        });

        processFileBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        processFileBtn.setText("PROCESS FILE");
        processFileBtn.setEnabled(false);
        processFileBtn.setMaximumSize(new java.awt.Dimension(145, 25));
        processFileBtn.setMinimumSize(new java.awt.Dimension(145, 25));
        processFileBtn.setPreferredSize(new java.awt.Dimension(145, 25));

        customizeAccessLogTable();

        processFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processFileBtnActionPerformed(evt);
            }
        });

        accessLogTbl.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        accessLogTbl.setRowHeight(50);
        jScrollPane1.setViewportView(accessLogTbl);

        columnSelector.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        columnSelector.setMaximumSize(new java.awt.Dimension(140, 25));
        columnSelector.setMinimumSize(new java.awt.Dimension(140, 25));
        columnSelector.setPreferredSize(new java.awt.Dimension(140, 25));

        clearFilterBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        clearFilterBtn.setText("CLEAR FILTER");
        clearFilterBtn.setMaximumSize(new java.awt.Dimension(130, 25));
        clearFilterBtn.setMinimumSize(new java.awt.Dimension(130, 25));
        clearFilterBtn.setPreferredSize(new java.awt.Dimension(130, 25));
        clearFilterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFilterBtnActionPerformed(evt);
            }
        });

        criteriaSelector.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        criteriaSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "LIKE", "GT", "LT", "EQ", "NE" }));
        criteriaSelector.setMaximumSize(new java.awt.Dimension(130, 25));
        criteriaSelector.setMinimumSize(new java.awt.Dimension(130, 25));
        criteriaSelector.setPreferredSize(new java.awt.Dimension(130, 25));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setText("Criteria");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setText("Column");

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setText("Disjunction");

        disjunctionSelector.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        disjunctionSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "OR", "AND" }));
        disjunctionSelector.setMaximumSize(new java.awt.Dimension(130, 25));
        disjunctionSelector.setMinimumSize(new java.awt.Dimension(130, 25));
        disjunctionSelector.setPreferredSize(new java.awt.Dimension(130, 25));

        searchButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchButton.setText("SEARCH");
        searchButton.setMaximumSize(new java.awt.Dimension(130, 25));
        searchButton.setMinimumSize(new java.awt.Dimension(130, 25));
        searchButton.setPreferredSize(new java.awt.Dimension(130, 25));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        reqMethodLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        reqMethodLbl.setText("Method");

        reqMethodSelector.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        reqMethodSelector.setMaximumSize(new java.awt.Dimension(130, 25));
        reqMethodSelector.setMinimumSize(new java.awt.Dimension(130, 25));
        reqMethodSelector.setPreferredSize(new java.awt.Dimension(130, 25));

        removeTextField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        removeTextField.setPreferredSize(new java.awt.Dimension(65, 30));

        removeTextBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        removeTextBtn.setText("REMOVE TEXT");
        removeTextBtn.setMaximumSize(new java.awt.Dimension(130, 25));
        removeTextBtn.setMinimumSize(new java.awt.Dimension(130, 25));
        removeTextBtn.setPreferredSize(new java.awt.Dimension(130, 25));
        removeTextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTextBtnActionPerformed(evt);
            }
        });

        removeTextResetBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        removeTextResetBtn.setText("RESET TEXT");
        removeTextResetBtn.setMaximumSize(new java.awt.Dimension(130, 25));
        removeTextResetBtn.setMinimumSize(new java.awt.Dimension(130, 25));
        removeTextResetBtn.setPreferredSize(new java.awt.Dimension(130, 25));
        removeTextResetBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTextResetBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel5)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                                .addComponent(columnSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(criteriaSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(18, 18, 18)
                                                                                .addComponent(reqMethodLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGap(33, 33, 33)
                                                                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(disjunctionSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(32, 32, 32)
                                                                                .addComponent(removeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(removeTextBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(removeTextResetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(reqMethodSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addGap(34, 34, 34)
                                                                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                                .addComponent(clearFilterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addGroup(layout.createSequentialGroup()
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                                        .addComponent(jLabel2))
                                                                                .addGap(15, 15, 15)
                                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                                        .addComponent(searchField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                        .addComponent(patternField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                                        .addComponent(fileNameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                                        .addComponent(jLabel1))
                                                                .addGap(18, 18, 18)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(processFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(pickFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(jLabel3)
                                                .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(pickFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(processFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(patternField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel2))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel1)
                                        .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel5)
                                        .addComponent(columnSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel6)
                                        .addComponent(disjunctionSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(removeTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(removeTextBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(removeTextResetBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel4)
                                        .addComponent(criteriaSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(reqMethodLbl)
                                        .addComponent(reqMethodSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(clearFilterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pickFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickFileBtnActionPerformed
        String newFile = openFileDialog(this);
        fileNameField.setText(newFile);
        processFileBtn.setEnabled(Utils.areStringsValid(newFile));
    }//GEN-LAST:event_pickFileBtnActionPerformed

    private void processFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processFileBtnActionPerformed
        String pattern = Utils.areStringsValid(patternField.getText()) ? patternField.getText() : PropManager.getDefaultPattern();
        ActionDTO actionDTO = LogWatcher.readAccessFile(fileNameField.getText(), pattern);
        if (actionDTO.getIsSuccessful()) {

            AccessLogDTO accessLogDTO = (AccessLogDTO) actionDTO.getData();
            LogEntryTableModel logEntryTableModel = new LogEntryTableModel(accessLogDTO.getLogEntries());
            logEntryTableModel.setColumnNames(accessLogDTO.getHeaders().toArray(new String[0]));
            logEntryTableModel.setColumnApacheValue(accessLogDTO.getColumnApacheValues());

            //set columns
            columnSelector.setModel(new DefaultComboBoxModel<>(accessLogDTO.getHeaders().toArray(new String[0])));

            //set req methods

            accessLogDTO.getRequestMethods().add(0, "ANY");
            reqMethodSelector.setModel(new DefaultComboBoxModel<>(accessLogDTO.getRequestMethods().toArray(new String[0])));

            this.accessLogDate = accessLogDTO.getAccessLogDate();

            this.accessLogTbl.setModel(logEntryTableModel);

            tableSorter = new TableRowSorter<>(accessLogTbl.getModel()); // Initialize sorter
            accessLogTbl.setRowSorter(tableSorter);

            for (int i = 0; i < accessLogTbl.getColumnCount(); i++) {

                String apacheColumnVal = accessLogDTO.getColumnApacheValues().get(i);

                Class logDataType = ApacheLoggingConstants.LOG_DATA_TYPE_MAP.get(apacheColumnVal);

                setAccessLogTableCellRenderer(apacheColumnVal, logDataType, i);
            }
        } else {
            JOptionPane.showMessageDialog(this, actionDTO.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_processFileBtnActionPerformed

    private void clearFilterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFilterBtnActionPerformed
        tableFilter = null;
        tableSorter.setRowFilter(null);
        searchField.setText("");
        reqMethodSelector.setSelectedIndex(0);
    }//GEN-LAST:event_clearFilterBtnActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        filterTable();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void removeTextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTextBtnActionPerformed
        String textToRemove = removeTextField.getText();

        String selectedColumnName = (String) columnSelector.getSelectedItem();

        int selectedColumnModelIndex = getColumnIndexByColumnName(selectedColumnName, true, false);

        if(!columnRendererMap.containsKey(selectedColumnModelIndex)) {
            columnRendererMap.put(selectedColumnModelIndex, accessLogTbl.getColumnModel().getColumn(selectedColumnModelIndex).getCellRenderer());
        }

        List<String> truncatedTexts = columnTruncatedTexts.get(selectedColumnModelIndex);
        if(Utils.areStringsValid(truncatedTexts)){
            truncatedTexts.add(textToRemove);
        } else {
            truncatedTexts = new ArrayList<>();
            truncatedTexts.add(textToRemove);
        }
        columnTruncatedTexts.put(selectedColumnModelIndex, truncatedTexts);

        accessLogTbl.getColumnModel().getColumn(selectedColumnModelIndex).setCellRenderer(new TextTruncateCellRenderer(truncatedTexts));
        // accessLogTbl.setTransferHandler(new TruncatedCopyHandler(truncatedTexts));
        accessLogTbl.repaint();
    }//GEN-LAST:event_removeTextBtnActionPerformed

    private void removeTextResetBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTextResetBtnActionPerformed
        String selectedColumnName = (String) columnSelector.getSelectedItem();
        int selectedColumnModelIndex = getColumnIndexByColumnName(selectedColumnName, true, false);
        TableCellRenderer renderer = columnRendererMap.get(selectedColumnModelIndex);
        if(renderer != null) {
            accessLogTbl.getColumnModel().getColumn(selectedColumnModelIndex).setCellRenderer(renderer);
        }
        columnTruncatedTexts.remove(selectedColumnModelIndex);
        // accessLogTbl.setTransferHandler(null);
        accessLogTbl.repaint();
    }//GEN-LAST:event_removeTextResetBtnActionPerformed


    public static String openFileDialog(JFrame parent){
        String filePath = "";
        try{
            FileDialog fd = new FileDialog(parent, "Open File");
            fd.setVisible(true);
            if(Utils.areStringsValid(fd.getFile(), fd.getDirectory())){
                filePath = fd.getDirectory()+fd.getFile();
            }
        } catch (Exception e){
            AppLogger.logSevere("Error AccessLogViewScreen.openFileDialog", e);
        }
        return filePath;
    }
    private void filterTable() {
        String text = searchField.getText();

        String selectedColumnName = (String) columnSelector.getSelectedItem();

        int selectedColumnModelIndex = getColumnIndexByColumnName(selectedColumnName, true, false);

        int selectedColumnIndex = getColumnIndexByColumnName(selectedColumnName, false, false);

        String selectedCriteria = (String) criteriaSelector.getSelectedItem();

        RowFilter<TableModel, Object> columnFilter = null;
        if (Utils.areStringsValid(text)) {
            if (Objects.equals(selectedCriteria, "LIKE")) {
                String regex = "(?i)" + text.replace("*", ".*");
                columnFilter = RowFilter.regexFilter("(?i)" + Pattern.quote(text), selectedColumnIndex);
            } else {
                AccessLogTableCellRenderer cellRenderer = (AccessLogTableCellRenderer) accessLogTbl.getColumnModel().getColumn(selectedColumnIndex).getCellRenderer();
                if (cellRenderer.getClassType().equals(Date.class)) {
                    try {
                        Date dateTime = UIUtils.getDateFromInputDateString(text, this.accessLogDate);
                        columnFilter = RowFilter.dateFilter(UIUtils.getComparisonType(selectedCriteria), dateTime, selectedColumnModelIndex);
                    } catch (Exception pe) {
                        JOptionPane.showMessageDialog(null, "Please enter a valid number or date. Such as: " + String.join(", ", PropManager.getAllowedDateInputFormats()));
                    }
                } else if (cellRenderer.getClassType().equals(Double.class)) {
                    Double numericValue = Double.parseDouble(text);
                    columnFilter = RowFilter.numberFilter(UIUtils.getComparisonType(selectedCriteria), numericValue, selectedColumnModelIndex);
                } else if (cellRenderer.getClassType().equals(String.class)) {
                    columnFilter = RowFilter.regexFilter(text, selectedColumnModelIndex);
                } else if (cellRenderer.getClassType().equals(Integer.class)) {
                    Integer numericValue = Integer.parseInt(text);
                    columnFilter = RowFilter.numberFilter(UIUtils.getComparisonType(selectedCriteria), numericValue, selectedColumnModelIndex);
                }
            }

            if (columnFilter != null) {
                if (tableFilter != null) {
                    List<RowFilter<TableModel, Object>> combinedFilters = new ArrayList<>();
                    combinedFilters.add(tableFilter);
                    combinedFilters.add(columnFilter);

                    if ("AND".equals(disjunctionSelector.getSelectedItem().toString())) {
                        tableFilter = RowFilter.andFilter(combinedFilters);
                    } else {
                        tableFilter = RowFilter.orFilter(combinedFilters);
                    }
                } else {
                    tableFilter = columnFilter;
                }

            }
        }
        RowFilter<TableModel, Object> requestMethodFilter = getRequestMethodFilter();
        if(tableFilter != null) {
            List<RowFilter<TableModel, Object>> filterWithRequestMethod = new ArrayList<>();
            filterWithRequestMethod.add(tableFilter);
            filterWithRequestMethod.add(requestMethodFilter);
            tableSorter.setRowFilter(RowFilter.andFilter(filterWithRequestMethod));
        } else {
            tableSorter.setRowFilter(requestMethodFilter);
        }
    }


    private RowFilter<TableModel, Object> getRequestMethodFilter() {
        String requestMethod = (String)reqMethodSelector.getSelectedItem();
        int columnIndex = getColumnIndexByColumnName(ApacheLoggingConstants.DESC_REQUEST_METHOD, true, false);
        if(Objects.equals(requestMethod, "ANY")){
            return RowFilter.regexFilter(".*", columnIndex); // Matches everything, effectively removing the filter
        } else {
            return RowFilter.regexFilter(requestMethod, columnIndex);
        }
    }

    private int getColumnIndexByColumnName(String columnName, Boolean modelIndex, Boolean viewIndex) {
        Enumeration<TableColumn> columns = accessLogTbl.getColumnModel().getColumns();

        int index = -1;
        int i = 0;

        while (columns.hasMoreElements()) {
            TableColumn column = columns.nextElement();
            if (columnName.equals(column.getHeaderValue().toString())) {
                index = i;
                break;
            }
            i++;
        }
        index = index >= 0 ? index : 0;

        if(Boolean.TRUE.equals(modelIndex)) {
            index = accessLogTbl.convertColumnIndexToModel(index);
        } else if(Boolean.TRUE.equals(viewIndex)) {
            index = accessLogTbl.convertColumnIndexToView(index);
        }
        return index;
    }

    private void customizeAccessLogTable() {
        JTableHeader header = accessLogTbl.getTableHeader();
        header.setFont(new Font("Arial", Font.BOLD, 14));
        AccessLogTableMouseAdapter mouseAdapter = new AccessLogTableMouseAdapter(accessLogTbl);
        accessLogTbl.addMouseListener(mouseAdapter);
        accessLogTbl.addMouseMotionListener(mouseAdapter);
    }

    private void setAccessLogTableCellRenderer(String apacheColumnVal, Class<?> logDataType, int cellIndex) {
        AccessLogTableCellRenderer tableCellRenderer = null;

        if(Objects.equals(apacheColumnVal, ApacheLoggingConstants.FIRST_REQUEST_LINE)) {
            tableCellRenderer = new AccessLogTableWrappedCellRenderer();
        } else {
            tableCellRenderer = new AccessLogTableNormalCellRenderer();
            if (Objects.equals(apacheColumnVal, ApacheLoggingConstants.DATE_TIME) ||
                    Objects.equals(apacheColumnVal, ApacheLoggingConstants.REQUEST_START_TIME)) {

                String dateFormat = Objects.equals(apacheColumnVal, ApacheLoggingConstants.DATE_TIME) ?
                        PropManager.getEndTimeDateFormat() :
                        Objects.equals(apacheColumnVal, ApacheLoggingConstants.REQUEST_START_TIME) ?
                                PropManager.getStartTimeDateFormat() :
                                Constants.DATE_FORMATS.dd_MMM_YYYY.getValue();

                tableCellRenderer.setDateFormat(dateFormat);
            }
        }
        tableCellRenderer.setClassType(logDataType);
        accessLogTbl.getColumnModel().getColumn(cellIndex).setCellRenderer(tableCellRenderer);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accessLogTbl;
    private javax.swing.JButton clearFilterBtn;
    private javax.swing.JComboBox<String> columnSelector;
    private javax.swing.JComboBox<String> criteriaSelector;
    private javax.swing.JComboBox<String> disjunctionSelector;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField patternField;
    private javax.swing.JButton pickFileBtn;
    private javax.swing.JButton processFileBtn;
    private javax.swing.JButton removeTextBtn;
    private javax.swing.JTextField removeTextField;
    private javax.swing.JButton removeTextResetBtn;
    private javax.swing.JLabel reqMethodLbl;
    private javax.swing.JComboBox<String> reqMethodSelector;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    // End of variables declaration//GEN-END:variables
}
