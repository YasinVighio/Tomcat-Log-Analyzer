/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.tomcatlogwatcher.userinterface;

import org.tomcatlogwatcher.data.ApacheLoggingConstants;
import org.tomcatlogwatcher.data.Constants;
import org.tomcatlogwatcher.core.LogWatcher;
import org.tomcatlogwatcher.core.PropManager;
import org.tomcatlogwatcher.dto.AccessLogDTO;
import org.tomcatlogwatcher.dto.ActionDTO;
import org.tomcatlogwatcher.userinterface.renderers.AccessLogTableCellRenderer;
import org.tomcatlogwatcher.userinterface.renderers.AccessLogTableNormalCellRenderer;
import org.tomcatlogwatcher.userinterface.adapters.AccessLogTableMouseAdapter;
import org.tomcatlogwatcher.userinterface.renderers.AccessLogTableWrappedCellRenderer;
import org.tomcatlogwatcher.utility.AppLogger;
import org.tomcatlogwatcher.utility.Utils;

import javax.swing.*;
import javax.swing.table.*;
import java.awt.*;
import java.util.*;
import java.util.List;

/**
 *
 * @author Yasin
 */
public class AccessLogViewer extends javax.swing.JFrame {

    private static RowFilter<TableModel, Object> tableFilter = null;
    private static TableRowSorter<TableModel> tableSorter = null;
    private Date accessLogDate = null;
    private Map<Integer, TableCellRenderer> columnRendererMap = new HashMap<>();
    private Map<Integer, List<String>> columnTruncatedTexts = new HashMap<>();

    /**
     * Creates new form AccessLogViewScreen
     */
    public AccessLogViewer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        fileNameField = new javax.swing.JTextField();
        patternField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pickFileBtn = new javax.swing.JButton();
        processFileBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        accessLogTbl = new javax.swing.JTable();
        clearFilterBtn = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        sqlText = new javax.swing.JTextArea();
        jLabel7 = new javax.swing.JLabel();
        statusLbl = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        columnNameLbl = new javax.swing.JTextPane();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        fileNameField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        fileNameField.setEnabled(false);
        fileNameField.setMaximumSize(new java.awt.Dimension(480, 25));
        fileNameField.setMinimumSize(new java.awt.Dimension(480, 25));
        fileNameField.setName(""); // NOI18N
        fileNameField.setPreferredSize(new java.awt.Dimension(480, 25));

        patternField.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        patternField.setMaximumSize(new java.awt.Dimension(480, 25));
        patternField.setMinimumSize(new java.awt.Dimension(480, 25));
        patternField.setPreferredSize(new java.awt.Dimension(480, 25));

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("Pattern");

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setText("File");

        pickFileBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        pickFileBtn.setText("PICK FILE");
        pickFileBtn.setMaximumSize(new java.awt.Dimension(145, 25));
        pickFileBtn.setMinimumSize(new java.awt.Dimension(145, 25));
        pickFileBtn.setPreferredSize(new java.awt.Dimension(145, 25));
        pickFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickFileBtnActionPerformed(evt);
            }
        });

        processFileBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        processFileBtn.setText("PROCESS FILE");
        processFileBtn.setEnabled(false);
        processFileBtn.setMaximumSize(new java.awt.Dimension(145, 25));
        processFileBtn.setMinimumSize(new java.awt.Dimension(145, 25));
        processFileBtn.setPreferredSize(new java.awt.Dimension(145, 25));
        processFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processFileBtnActionPerformed(evt);
            }
        });

        accessLogTbl.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        accessLogTbl.setRowHeight(50);
        jScrollPane1.setViewportView(accessLogTbl);

        clearFilterBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        clearFilterBtn.setText("CLEAR FILTER");
        clearFilterBtn.setEnabled(false);
        clearFilterBtn.setMaximumSize(new java.awt.Dimension(130, 25));
        clearFilterBtn.setMinimumSize(new java.awt.Dimension(130, 25));
        clearFilterBtn.setPreferredSize(new java.awt.Dimension(130, 25));
        customizeAccessLogTable();
        clearFilterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFilterBtnActionPerformed(evt);
            }
        });

        searchButton.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchButton.setText("EXECUTE");
        searchButton.setEnabled(false);
        searchButton.setMaximumSize(new java.awt.Dimension(130, 25));
        searchButton.setMinimumSize(new java.awt.Dimension(130, 25));
        searchButton.setPreferredSize(new java.awt.Dimension(130, 25));
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        sqlText.setColumns(20);
        sqlText.setRows(5);
        jScrollPane2.setViewportView(sqlText);

        jLabel7.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel7.setText("SQL");

        statusLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N

        columnNameLbl.setBackground(javax.swing.UIManager.getDefaults().getColor("Panel.background"));
        columnNameLbl.setContentType("text/html"); // NOI18N
        columnNameLbl.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        columnNameLbl.setText("");
        columnNameLbl.setEditable(false);
        jScrollPane4.setViewportView(columnNameLbl);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jLabel7))
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(patternField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fileNameField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(processFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                                    .addComponent(pickFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(statusLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(clearFilterBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(fileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(pickFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(patternField, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(processFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(statusLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearFilterBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel7))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pickFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickFileBtnActionPerformed
        String newFile = openFileDialog(this);
        fileNameField.setText(newFile);
        processFileBtn.setEnabled(Utils.areStringsValid(newFile));
    }//GEN-LAST:event_pickFileBtnActionPerformed

    private void processFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processFileBtnActionPerformed
        String pattern = Utils.areStringsValid(patternField.getText()) ? patternField.getText() : PropManager.getDefaultPattern();
        this.statusLbl.setText("Processing.... ");
        this.processFileBtn.setEnabled(false);
        this.searchButton.setEnabled(false);
        this.clearFilterBtn.setEnabled(false);
        Runnable r = () -> {
            ActionDTO actionDTO = LogWatcher.readAccessFile(fileNameField.getText(), pattern);
            if (actionDTO.getIsSuccessful()) {
                AccessLogDTO accessLogDTO = (AccessLogDTO) actionDTO.getData();
                LogEntryTableModel logEntryTableModel = new LogEntryTableModel(accessLogDTO.getLogEntries());
                logEntryTableModel.setColumnNames(accessLogDTO.getHeaders().toArray(new String[0]));
                logEntryTableModel.setColumnApacheValue(accessLogDTO.getColumnApacheValues());

                setDbColumnNames(accessLogDTO.getColumnApacheValues());

                accessLogDTO.getRequestMethods().add(0, "ANY");

                accessLogDate = accessLogDTO.getAccessLogDate();

                accessLogTbl.setModel(logEntryTableModel);

                tableSorter = new TableRowSorter<>(accessLogTbl.getModel()); // Initialize sorter
                accessLogTbl.setRowSorter(tableSorter);

                for (int i = 0; i < accessLogTbl.getColumnCount(); i++) {

                    String apacheColumnVal = accessLogDTO.getColumnApacheValues().get(i);

                    Class logDataType = ApacheLoggingConstants.LOG_DATA_TYPE_MAP.get(apacheColumnVal);

                    setAccessLogTableCellRenderer(apacheColumnVal, logDataType, i);
                }
                searchButton.setEnabled(true);
                clearFilterBtn.setEnabled(true);
            } else {
                searchButton.setEnabled(false);
                clearFilterBtn.setEnabled(false);
                JOptionPane.showMessageDialog(null, actionDTO.getMessage(), "Error Message", JOptionPane.ERROR_MESSAGE);
            }
            statusLbl.setText("");
            processFileBtn.setEnabled(true);
            System.gc();
        };

        Thread th = new Thread(r);
        th.start();

    }//GEN-LAST:event_processFileBtnActionPerformed

    private void clearFilterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFilterBtnActionPerformed

    }//GEN-LAST:event_clearFilterBtnActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        filterTable();
    }//GEN-LAST:event_searchButtonActionPerformed


    public static String openFileDialog(JFrame parent){
        String filePath = "";
        try{
            FileDialog fd = new FileDialog(parent, "Open File");
            fd.setVisible(true);
            if(Utils.areStringsValid(fd.getFile(), fd.getDirectory())){
                filePath = fd.getDirectory()+fd.getFile();
            }
        } catch (Exception e){
            AppLogger.logSevere("Error AccessLogViewScreen.openFileDialog", e);
        }
        return filePath;
    }
    private void filterTable() {
        String sql = this.sqlText.getText();

    }


    private int getColumnIndexByColumnName(String columnName, Boolean modelIndex, Boolean viewIndex) {
        Enumeration<TableColumn> columns = accessLogTbl.getColumnModel().getColumns();

        int index = -1;
        int i = 0;

        while (columns.hasMoreElements()) {
            TableColumn column = columns.nextElement();
            if (columnName.equals(column.getHeaderValue().toString())) {
                index = i;
                break;
            }
            i++;
        }
        index = index >= 0 ? index : 0;

        if(Boolean.TRUE.equals(modelIndex)) {
            index = accessLogTbl.convertColumnIndexToModel(index);
        } else if(Boolean.TRUE.equals(viewIndex)) {
            index = accessLogTbl.convertColumnIndexToView(index);
        }
        return index;
    }

    private void customizeAccessLogTable() {
        JTableHeader header = accessLogTbl.getTableHeader();
        header.setFont(new Font("Arial", Font.BOLD, 14));
        AccessLogTableMouseAdapter mouseAdapter = new AccessLogTableMouseAdapter(accessLogTbl);
        accessLogTbl.addMouseListener(mouseAdapter);
        accessLogTbl.addMouseMotionListener(mouseAdapter);
    }

    private void setAccessLogTableCellRenderer(String apacheColumnVal, Class<?> logDataType, int cellIndex) {
        AccessLogTableCellRenderer tableCellRenderer = null;

        if(Objects.equals(apacheColumnVal, ApacheLoggingConstants.FIRST_REQUEST_LINE)) {
            tableCellRenderer = new AccessLogTableWrappedCellRenderer();
        } else {
            tableCellRenderer = new AccessLogTableNormalCellRenderer();
            if (Objects.equals(apacheColumnVal, ApacheLoggingConstants.DATE_TIME) ||
                    Objects.equals(apacheColumnVal, ApacheLoggingConstants.REQUEST_START_TIME)) {

                String dateFormat = Objects.equals(apacheColumnVal, ApacheLoggingConstants.DATE_TIME) ?
                        PropManager.getEndTimeDateFormat() :
                        Objects.equals(apacheColumnVal, ApacheLoggingConstants.REQUEST_START_TIME) ?
                                PropManager.getStartTimeDateFormat() :
                                Constants.DATE_FORMATS.dd_MMM_YYYY.getValue();

                tableCellRenderer.setDateFormat(dateFormat);
            }
        }
        tableCellRenderer.setClassType(logDataType);
        accessLogTbl.getColumnModel().getColumn(cellIndex).setCellRenderer(tableCellRenderer);
    }

    private void setDbColumnNames(List<String> apacheColumnVals) {
        StringBuilder columnLbl = new StringBuilder("<html><b>Column Names</b><br>");
        for(String apacheColumnVal : apacheColumnVals) {
            columnLbl.append(ApacheLoggingConstants.LOG_DB_COL_MAP.get(apacheColumnVal)).append("<br>");
        }
        columnLbl.append("</html>");
        this.columnNameLbl.setText(columnLbl.toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accessLogTbl;
    private javax.swing.JButton clearFilterBtn;
    private javax.swing.JTextPane columnNameLbl;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField patternField;
    private javax.swing.JButton pickFileBtn;
    private javax.swing.JButton processFileBtn;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextArea sqlText;
    private javax.swing.JLabel statusLbl;
    // End of variables declaration//GEN-END:variables
}
