/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.tomcatlogwatcher.userinterface.screens;

import org.tomcatlogwatcher.core.AccessLogDbOperationService;
import org.tomcatlogwatcher.core.AccessLogFileOperationService;
import org.tomcatlogwatcher.core.DataExporter;
import org.tomcatlogwatcher.core.PropManager;
import org.tomcatlogwatcher.data.AccessLogInfoService;
import org.tomcatlogwatcher.data.ApacheLoggingConstants;
import org.tomcatlogwatcher.data.Constants;
import org.tomcatlogwatcher.dto.AccessLogInfoDTO;
import org.tomcatlogwatcher.dto.ActionDTO;
import org.tomcatlogwatcher.dto.HTMLTextDTO;
import org.tomcatlogwatcher.userinterface.adapters.AccessLogTableMouseAdapter;
import org.tomcatlogwatcher.userinterface.models.LogEntryTableModel;
import org.tomcatlogwatcher.userinterface.renderers.AccessLogTableCellRenderer;
import org.tomcatlogwatcher.userinterface.renderers.AccessLogTableNormalCellRenderer;
import org.tomcatlogwatcher.userinterface.renderers.AccessLogTableWrappedCellRenderer;
import org.tomcatlogwatcher.utility.AppLogger;
import org.tomcatlogwatcher.utility.UIUtils;
import org.tomcatlogwatcher.utility.Utils;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 *
 * @author Yasin
 */
public class AccessLogViewScreen extends javax.swing.JFrame {

    private String selectedFileName = null;
    private final List<String> queryHistory = new ArrayList<>();
    private int queryPointer = -1;
    private boolean allSelection = false;
    private boolean resetOrder = false;

    /**
     * Creates new form NewJFrame
     */
    public AccessLogViewScreen() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableInfoPane = new javax.swing.JTextPane();
        jPanel5 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        formatSelector = new javax.swing.JComboBox<>();
        processFileBtn = new javax.swing.JButton();
        pickFileBtn = new javax.swing.JButton();
        exportBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        patternFld = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        accessLogTbl = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sqlFld = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        queryButtonsFrame = new javax.swing.JPanel();
        prevQueryBtn = new javax.swing.JButton();
        nextQueryBtn = new javax.swing.JButton();
        execQueryBtn = new javax.swing.JButton();
        clearFilterBtn = new javax.swing.JButton();
        resetOrderBtn = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        outputPane = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 0, java.awt.Color.blue));
        jPanel2.setLayout(new java.awt.GridLayout(2, 0, 0, 5));

        tableInfoPane.setEditable(false);
        tableInfoPane.setContentType("text/html"); // NOI18N
        tableInfoPane.setText("");
        tableInfoPane.setOpaque(false);
        jScrollPane3.setViewportView(tableInfoPane);

        jPanel2.add(jScrollPane3);

        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setText("EXPORT FORMAT");

        formatSelector.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        formatSelector.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { DataExporter.PDF, DataExporter.XLS}));
        formatSelector.setEnabled(false);

        processFileBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        processFileBtn.setText("PROCESS FILE");
        processFileBtn.setEnabled(false);
        processFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processFileBtnActionPerformed(evt);
            }
        });

        pickFileBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        pickFileBtn.setText("PICK FILE");
        pickFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickFileBtnActionPerformed(evt);
            }
        });

        exportBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        exportBtn.setText("EXPORT DATA");
        exportBtn.setEnabled(false);
        exportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 62, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(processFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(formatSelector, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(pickFileBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(exportBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(pickFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processFileBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(formatSelector, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(exportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );

        jPanel2.add(jPanel5);

        getContentPane().add(jPanel2, java.awt.BorderLayout.LINE_START);

        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 0, 2, java.awt.Color.blue));
        jPanel4.setLayout(new java.awt.GridLayout(2, 2));

        jLabel4.setBackground(new java.awt.Color(0, 0, 153));
        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("TABLE NAME");
        jLabel4.setOpaque(true);
        jPanel4.add(jLabel4);

        jLabel1.setBackground(new java.awt.Color(0, 0, 153));
        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setLabelFor(patternFld);
        jLabel1.setText("PATTERN");
        jLabel1.setOpaque(true);
        jPanel4.add(jLabel1);

        jLabel5.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText(PropManager.getLogTableName());
        jPanel4.add(jLabel5);

        patternFld.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        jPanel4.add(patternFld);

        jPanel3.add(jPanel4, java.awt.BorderLayout.PAGE_START);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane2.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, java.awt.Color.blue));

        accessLogTbl.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        accessLogTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        accessLogTbl.setCellSelectionEnabled(true);
        accessLogTbl.setRowHeight(50);
        accessLogTbl.setRowMargin(5);
        accessLogTbl.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        accessLogTbl.setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        jScrollPane2.setViewportView(accessLogTbl);
        customizeAccessLogTable();

        jPanel1.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel6.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 2, 2, 2, java.awt.Color.blue));
        jPanel6.setLayout(new java.awt.GridLayout(1, 3));

        jPanel7.setLayout(new java.awt.GridLayout(1, 0));

        sqlFld.setColumns(20);
        sqlFld.setFont(new java.awt.Font("Lucida Console", 0, 18)); // NOI18N
        sqlFld.setLineWrap(true);
        sqlFld.setRows(5);
        jScrollPane1.setViewportView(sqlFld);

        jPanel7.add(jScrollPane1);

        jPanel6.add(jPanel7);

        jPanel9.setLayout(new java.awt.GridLayout(1, 0));

        prevQueryBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        prevQueryBtn.setText("<<");
        prevQueryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevQueryBtnActionPerformed(evt);
            }
        });

        nextQueryBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        nextQueryBtn.setText(">>");
        nextQueryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextQueryBtnActionPerformed(evt);
            }
        });

        execQueryBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        execQueryBtn.setText("EXECUTE QUERY");
        execQueryBtn.setEnabled(false);
        execQueryBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                execQueryBtnActionPerformed(evt);
            }
        });

        clearFilterBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        clearFilterBtn.setText("CLEAR FILTER");
        clearFilterBtn.setEnabled(false);
        clearFilterBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFilterBtnActionPerformed(evt);
            }
        });

        resetOrderBtn.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        resetOrderBtn.setText("RESET ORDER");
        resetOrderBtn.setEnabled(false);
        resetOrderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetOrderBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout queryButtonsFrameLayout = new javax.swing.GroupLayout(queryButtonsFrame);
        queryButtonsFrame.setLayout(queryButtonsFrameLayout);
        queryButtonsFrameLayout.setHorizontalGroup(
            queryButtonsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryButtonsFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(queryButtonsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(resetOrderBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, queryButtonsFrameLayout.createSequentialGroup()
                        .addComponent(prevQueryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nextQueryBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(execQueryBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearFilterBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        queryButtonsFrameLayout.setVerticalGroup(
            queryButtonsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(queryButtonsFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(queryButtonsFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevQueryBtn)
                    .addComponent(nextQueryBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(clearFilterBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resetOrderBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(execQueryBtn)
                .addContainerGap())
        );

        jPanel9.add(queryButtonsFrame);

        jPanel10.setLayout(new java.awt.GridLayout(1, 0));

        outputPane.setContentType("text/html"); // NOI18N
        jScrollPane7.setViewportView(outputPane);

        jPanel10.add(jScrollPane7);

        jPanel9.add(jPanel10);

        jPanel6.add(jPanel9);

        jPanel1.add(jPanel6, java.awt.BorderLayout.PAGE_END);

        jPanel3.add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pickFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickFileBtnActionPerformed
        String newFile = UIUtils.openFileDialog(this);
        boolean filePicked = Utils.areStringsValid(newFile) && newFile.endsWith(".txt");
        UIUtils.setOutputText(filePicked ? "File picked "+newFile : "File not picked", filePicked, this.outputPane);
        processFileBtn.setEnabled(filePicked);
        selectedFileName = filePicked ? newFile : null;
    }//GEN-LAST:event_pickFileBtnActionPerformed

    private void processFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processFileBtnActionPerformed
        String pattern = Utils.areStringsValid(patternFld.getText()) ? patternFld.getText() : PropManager.getDefaultPattern();
        UIUtils.setOutputText("Processing.... ", true, this.outputPane);
        enableDisableButtons(false);
        Runnable r = () -> {
            try {
                ActionDTO actionDTO = AccessLogFileOperationService.loadAccessLogFile(selectedFileName, pattern);
                if (actionDTO.getIsSuccessful()) {
                    String sql = Constants.ALL_SELECTION_QUERY;
                    filterTable(sql);
                    enableDisableButtons(true);
                }
                UIUtils.setOutputText(actionDTO.getMessage(), actionDTO.getIsSuccessful(), this.outputPane);
            } catch (Exception e) {
                enableDisableButtons(false);
                processFileBtn.setEnabled(true);
                UIUtils.setOutputText(e.getMessage(), false, this.outputPane);
                AppLogger.logSevere("Error in AccessLogViewScreen.processFileBtnActionPerformed()", e);
            } finally {
                System.gc();
            }
        };

        Thread th = new Thread(r);
        th.start();

    }//GEN-LAST:event_processFileBtnActionPerformed

    private void exportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportBtnActionPerformed
        UIUtils.setOutputText("Exporting Data... ", true, this.outputPane);
        enableDisableButtons(false);
        Runnable r = () -> {
            try {
                String format = formatSelector.getSelectedItem().toString();
                format = format == null ? DataExporter.XLS : format;
                DataExporter dataExporter = new DataExporter(accessLogTbl.getModel(), format);
                ActionDTO actionDTO = dataExporter.exportData();
                UIUtils.setOutputText(actionDTO.getMessage(), actionDTO.getIsSuccessful(), this.outputPane);
            } catch (Exception e) {
                AppLogger.logSevere("Error AccessLogViewScreen.exportData", e);
            } finally {
                enableDisableButtons(true);
                System.gc();
            }
        };
        Thread th = new Thread(r);
        th.start();
    }//GEN-LAST:event_exportBtnActionPerformed

    private void prevQueryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevQueryBtnActionPerformed
        if(queryPointer>0){
            queryPointer--;
            this.sqlFld.setText(queryHistory.get(queryPointer));
        }
    }//GEN-LAST:event_prevQueryBtnActionPerformed

    private void nextQueryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextQueryBtnActionPerformed
        if(queryPointer < queryHistory.size() - 1) {
            queryPointer++;
            this.sqlFld.setText(queryHistory.get(queryPointer));
        }
    }//GEN-LAST:event_nextQueryBtnActionPerformed

    private void execQueryBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_execQueryBtnActionPerformed
        String sql = this.sqlFld.getText();
        filterTable(sql);
    }//GEN-LAST:event_execQueryBtnActionPerformed

    private void clearFilterBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFilterBtnActionPerformed
        filterTable(Constants.ALL_SELECTION_QUERY);
    }//GEN-LAST:event_clearFilterBtnActionPerformed

    private void resetOrderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetOrderBtnActionPerformed
        this.resetOrder = true;
        filterTable(Constants.ALL_SELECTION_QUERY);
    }//GEN-LAST:event_resetOrderBtnActionPerformed

    private void enableDisableButtons(boolean enable) {
        this.processFileBtn.setEnabled(enable);
        this.exportBtn.setEnabled(enable);
        this.execQueryBtn.setEnabled(enable);
        this.clearFilterBtn.setEnabled(enable);
        this.formatSelector.setEnabled(enable);
        this.resetOrderBtn.setEnabled(enable);
    }

    private void setDataInTable(AbstractTableModel tableModel) {
        accessLogTbl.setModel(tableModel);
        accessLogTbl.setRowSorter(new TableRowSorter<>(accessLogTbl.getModel()));

        List<String> dbColumnNames = new ArrayList<>();
        for (int i = 0; i < accessLogTbl.getColumnCount(); i++) {
            String columnName = accessLogTbl.getColumnName(i);
            AccessLogInfoDTO infoDTO = AccessLogInfoService.getAccessLogInfoByDescription(columnName, false);
            dbColumnNames.add(infoDTO!=null ? infoDTO.getDbColumnName().toLowerCase(): columnName.toLowerCase());
            setAccessLogTableCellRenderer(i, infoDTO);
        }
        setDbColumnNames(dbColumnNames);
    }

    private void setAccessLogTableCellRenderer(int cellIndex, AccessLogInfoDTO infoDTO) {
        AccessLogTableCellRenderer tableCellRenderer = null;
        if(infoDTO!=null) {
            if (infoDTO.isLongText()) {
                tableCellRenderer = new AccessLogTableWrappedCellRenderer();
            } else {
                tableCellRenderer = new AccessLogTableNormalCellRenderer();
                String apacheColumnVal = infoDTO.getApachePattern();
                if (Objects.equals(apacheColumnVal, ApacheLoggingConstants.DATE_TIME) ||
                        Objects.equals(apacheColumnVal, ApacheLoggingConstants.REQUEST_START_TIME)) {

                    String dateFormat = Objects.equals(apacheColumnVal, ApacheLoggingConstants.DATE_TIME) ?
                            PropManager.getEndTimeDateFormat() :
                            Objects.equals(apacheColumnVal, ApacheLoggingConstants.REQUEST_START_TIME) ?
                                    PropManager.getStartTimeDateFormat() :
                                    Constants.DATE_FORMATS.dd_MMM_YYYY.getValue();

                    tableCellRenderer.setDateFormat(dateFormat);
                }
            }
            tableCellRenderer.setClassType(infoDTO.getJavaType());
        } else {
            tableCellRenderer = new AccessLogTableNormalCellRenderer();
        }

        accessLogTbl.getColumnModel().getColumn(cellIndex).setCellRenderer(tableCellRenderer);
    }

    private void setDbColumnNames(List<String> dbColumnNames) {
        HTMLTextDTO htmlText = HTMLTextDTO.builder().heading("Column Names")
                .headingColor("blue")
                .headingWeight("bold")
                .headingStyle("Arial")
                .headingFontSize("18px")
                .textLines(dbColumnNames)
                .breakLineOnEveryText(true)
                .textColor("red")
                .textStyle("Arial")
                .textFontSize("14px")
                .build();
        this.tableInfoPane.setText(htmlText.getGeneratedText());
    }

    private void customizeAccessLogTable() {
        JTableHeader header = accessLogTbl.getTableHeader();
        header.setFont(new Font("Arial", Font.BOLD, 16));
        AccessLogTableMouseAdapter mouseAdapter = new AccessLogTableMouseAdapter(accessLogTbl);
        accessLogTbl.addMouseListener(mouseAdapter);
        accessLogTbl.addMouseMotionListener(mouseAdapter);
    }

    private void filterTable(String sql) {
        try {
            if (UIUtils.validateDQL(sql)) {
                this.queryHistory.add(sql);

                StringBuilder projection = new StringBuilder();

                if(allSelection && !resetOrder){
                    for(int i=0; i<accessLogTbl.getColumnCount(); i++){
                        AccessLogInfoDTO infoDTO = AccessLogInfoService.getAccessLogInfoByDescription(accessLogTbl.getColumnName(i), false);
                        projection.append(infoDTO !=null ? infoDTO.getDbColumnName() : accessLogTbl.getColumnName(i));
                        if(i!=accessLogTbl.getColumnCount()-1){
                            projection.append(", ");
                        }
                    }
                }

                if(sql.contains(Constants.ALL_SELECTION_QUERY)){
                    this.allSelection = true;
                    if(projection.length()>0) {
                        sql = sql.replace("*", projection.toString());
                    }
                } else {
                    this.allSelection = false;
                }
                this.queryPointer++;
                ActionDTO actionDTO = AccessLogDbOperationService.getFilteredAccessLogEntries(sql);
                if (actionDTO.getIsSuccessful()) {
                    setDataInTable((LogEntryTableModel) actionDTO.getData());
                }
                UIUtils.setOutputText(actionDTO.getMessage(), actionDTO.getIsSuccessful(), this.outputPane);
            } else {
                JOptionPane.showMessageDialog(this, "Only query language is supported", "Error Message", JOptionPane.ERROR_MESSAGE);
            }
            this.resetOrder = false;
        } catch (Exception e) {
            AppLogger.logSevere("Error AccessLogViewScreen.filterTable()", e);
            UIUtils.setOutputText(e.getMessage(), false, this.outputPane);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccessLogViewScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccessLogViewScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccessLogViewScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccessLogViewScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccessLogViewScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable accessLogTbl;
    private javax.swing.JButton clearFilterBtn;
    private javax.swing.JButton execQueryBtn;
    private javax.swing.JButton exportBtn;
    private javax.swing.JComboBox<String> formatSelector;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JButton nextQueryBtn;
    private javax.swing.JTextPane outputPane;
    private javax.swing.JTextField patternFld;
    private javax.swing.JButton pickFileBtn;
    private javax.swing.JButton prevQueryBtn;
    private javax.swing.JButton processFileBtn;
    private javax.swing.JPanel queryButtonsFrame;
    private javax.swing.JButton resetOrderBtn;
    private javax.swing.JTextArea sqlFld;
    private javax.swing.JTextPane tableInfoPane;
    // End of variables declaration//GEN-END:variables
}
